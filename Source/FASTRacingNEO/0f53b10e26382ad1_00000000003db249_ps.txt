<?php
include 'Source/functions.php';
$fullWidth = $argv[1];
$fullHeight = $argv[2];
$scaleFactorX = always_decimal_format($fullWidth / 1280.0);
$scaleFactorY = always_decimal_format($fullHeight / 720.0);
?>
#version 420
#extension GL_ARB_texture_gather : enable
#extension GL_ARB_separate_shader_objects : enable
// shader 0f53b10e26382ad1
const float resScale = <?=$scaleFactorX?>; 
uniform ivec4 uf_remappedPS[20];
layout(binding = 0) uniform samplerCubeArray textureUnitPS0;// Tex0 addr 0x29119000 res 256x256x1 dim 3 tm: 4 format 0431 compSel: 0 1 2 3 mipView: 0x0 (num 0x9) sliceView: 0x0 (num 0x6) Sampler0 ClampX/Y/Z: 2 2 0 border: 0
layout(binding = 1) uniform samplerCubeArray textureUnitPS1;// Tex1 addr 0x29119000 res 256x256x1 dim 3 tm: 4 format 0431 compSel: 0 1 2 3 mipView: 0x0 (num 0x9) sliceView: 0x0 (num 0x6) Sampler1 ClampX/Y/Z: 2 2 0 border: 0
layout(binding = 2) uniform sampler2D textureUnitPS2;// Tex2 addr 0xf4000800 res 1280x720x1 dim 1 tm: 4 format 041a compSel: 0 1 2 3 mipView: 0x0 (num 0x1) sliceView: 0x0 (num 0x1) Sampler2 ClampX/Y/Z: 2 2 0 border: 0
layout(binding = 3) uniform sampler2D textureUnitPS3;// Tex3 addr 0xf4385000 res 1280x720x1 dim 1 tm: 4 format 021f compSel: 0 1 2 3 mipView: 0x0 (num 0x1) sliceView: 0x0 (num 0x1) Sampler3 ClampX/Y/Z: 2 2 0 border: 0
layout(binding = 4) uniform sampler2D textureUnitPS4;// Tex4 addr 0xf4a8d000 res 1280x720x1 dim 1 tm: 4 format 001a compSel: 0 1 2 3 mipView: 0x0 (num 0x1) sliceView: 0x0 (num 0x1) Sampler4 ClampX/Y/Z: 2 2 0 border: 0
layout(binding = 5) uniform sampler2D textureUnitPS5;// Tex5 addr 0xf4e11000 res 1280x720x1 dim 1 tm: 4 format 0011 compSel: 0 0 0 0 mipView: 0x0 (num 0x1) sliceView: 0x0 (num 0x1) Sampler5 ClampX/Y/Z: 2 2 0 border: 0
layout(location = 0) out vec4 passPixelColor0;
uniform vec2 uf_fragCoordScale;
void redcCUBE(vec4 src0, vec4 src1, out vec3 stm, out int faceId)
{
// stm -> x .. s, y .. t, z .. MajorAxis*2.0
vec3 inputCoord = normalize(vec3(src1.y, src1.x, src0.x));
float rx = inputCoord.x;
float ry = inputCoord.y;
float rz = inputCoord.z;
if( abs(rx) > abs(ry) && abs(rx) > abs(rz) )
{
stm.z = rx*2.0;
stm.xy = vec2(ry,rz);	
if( rx >= 0.0 )
{
faceId = 0;
}
else
{
faceId = 1;
}
}
else if( abs(ry) > abs(rx) && abs(ry) > abs(rz) )
{
stm.z = ry*2.0;
stm.xy = vec2(rx,rz);	
if( ry >= 0.0 )
{
faceId = 2;
}
else
{
faceId = 3;
}
}
else //if( abs(rz) > abs(ry) && abs(rz) > abs(rx) )
{
stm.z = rz*2.0;
stm.xy = vec2(rx,ry);	
if( rz >= 0.0 )
{
faceId = 4;
}
else
{
faceId = 5;
}
}
}
vec3 redcCUBEReverse(vec2 st, int faceId)
{
st.yx = st.xy;
vec3 v;
float majorAxis = 1.0;
if( faceId == 0 )
{
v.yz = (st-vec2(1.5))*(majorAxis*2.0);
v.x = 1.0;
}
else if( faceId == 1 )
{
v.yz = (st-vec2(1.5))*(majorAxis*2.0);
v.x = -1.0;
}
else if( faceId == 2 )
{
v.xz = (st-vec2(1.5))*(majorAxis*2.0);
v.y = 1.0;
}
else if( faceId == 3 )
{
v.xz = (st-vec2(1.5))*(majorAxis*2.0);
v.y = -1.0;
}
else if( faceId == 4 )
{
v.xy = (st-vec2(1.5))*(majorAxis*2.0);
v.z = 1.0;
}
else
{
v.xy = (st-vec2(1.5))*(majorAxis*2.0);
v.z = -1.0;
}
return v;
}
int clampFI32(int v)
{
if( v == 0x7FFFFFFF )
	return floatBitsToInt(1.0);
else if( v == 0xFFFFFFFF )
	return floatBitsToInt(0.0);
return floatBitsToInt(clamp(intBitsToFloat(v), 0.0, 1.0));
}
float mul_nonIEEE(float a, float b){ if( a == 0.0 || b == 0.0 ) return 0.0; return a*b; }
void main()
{
ivec4 R0i = ivec4(0);
ivec4 R1i = ivec4(0);
ivec4 R2i = ivec4(0);
ivec4 R3i = ivec4(0);
ivec4 R4i = ivec4(0);
ivec4 R5i = ivec4(0);
ivec4 R6i = ivec4(0);
ivec4 R7i = ivec4(0);
ivec4 R122i = ivec4(0);
ivec4 R123i = ivec4(0);
ivec4 R125i = ivec4(0);
ivec4 R126i = ivec4(0);
ivec4 R127i = ivec4(0);
int backupReg0i, backupReg1i, backupReg2i, backupReg3i, backupReg4i;
ivec4 PV0i = ivec4(0), PV1i = ivec4(0);
int PS0i = 0, PS1i = 0;
ivec4 tempi = ivec4(0);
float tempResultf;
int tempResulti;
ivec4 ARi = ivec4(0);
bool predResult = true;
bool activeMaskStack[2];
bool activeMaskStackC[3];
activeMaskStack[0] = false;
activeMaskStackC[0] = false;
activeMaskStackC[1] = false;
activeMaskStack[0] = true;
activeMaskStackC[0] = true;
activeMaskStackC[1] = true;
vec3 cubeMapSTM;
int cubeMapFaceId;
float cubeMapArrayIndex0 = 0.0;
float cubeMapArrayIndex1 = 0.0;
R0i = floatBitsToInt(vec4(gl_FragCoord.xy*uf_fragCoordScale,gl_FragCoord.zw) * resScale);
if( activeMaskStackC[1] == true ) {
R0i.w = floatBitsToInt(texelFetch(textureUnitPS5, ivec2(intBitsToFloat(R0i.x), intBitsToFloat(R0i.y)), 0).x);
}
if( activeMaskStackC[1] == true ) {
// 0
backupReg0i = R0i.x;
PV0i.x = floatBitsToInt(intBitsToFloat(R0i.y) + -(intBitsToFloat(uf_remappedPS[0].y)));
R127i.y = floatBitsToInt((intBitsToFloat(R0i.w) * 2.0 + -(1.0)));
R127i.z = floatBitsToInt(intBitsToFloat(backupReg0i) + -(intBitsToFloat(uf_remappedPS[0].x)));
PS0i = floatBitsToInt(1.0 / intBitsToFloat(uf_remappedPS[0].w));
// 1
PV1i.x = floatBitsToInt(intBitsToFloat(PV0i.x) * intBitsToFloat(PS0i));
PV1i.x = floatBitsToInt(intBitsToFloat(PV1i.x) * 2.0);
PV1i.z = floatBitsToInt(intBitsToFloat(uf_remappedPS[1].w) * 1.0);
R127i.w = floatBitsToInt(intBitsToFloat(uf_remappedPS[1].z) * 1.0);
PS1i = floatBitsToInt(1.0 / intBitsToFloat(uf_remappedPS[0].z));
// 2
PV0i.x = floatBitsToInt(intBitsToFloat(uf_remappedPS[1].x) * 1.0);
PV0i.y = floatBitsToInt(intBitsToFloat(uf_remappedPS[1].y) * 1.0);
PV0i.z = floatBitsToInt(intBitsToFloat(R127i.z) * intBitsToFloat(PS1i));
PV0i.z = floatBitsToInt(intBitsToFloat(PV0i.z) * 2.0);
R126i.w = floatBitsToInt(intBitsToFloat(PV1i.x) + -(1.0));
R127i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R127i.y),intBitsToFloat(uf_remappedPS[2].w)) + intBitsToFloat(PV1i.z)));
PS0i = R127i.z;
// 3
backupReg0i = R127i.y;
backupReg0i = R127i.y;
R123i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R127i.y),intBitsToFloat(uf_remappedPS[2].x)) + intBitsToFloat(PV0i.x)));
PV1i.x = R123i.x;
R127i.y = floatBitsToInt(intBitsToFloat(PV0i.z) + -(1.0));
R123i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(backupReg0i),intBitsToFloat(uf_remappedPS[2].y)) + intBitsToFloat(PV0i.y)));
PV1i.z = R123i.z;
R123i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(backupReg0i),intBitsToFloat(uf_remappedPS[2].z)) + intBitsToFloat(R127i.w)));
PV1i.w = R123i.w;
// 4
R123i.x = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(R126i.w)),intBitsToFloat(uf_remappedPS[3].x)) + intBitsToFloat(PV1i.x)));
PV0i.x = R123i.x;
R123i.y = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(R126i.w)),intBitsToFloat(uf_remappedPS[3].y)) + intBitsToFloat(PV1i.z)));
PV0i.y = R123i.y;
R123i.z = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(R126i.w)),intBitsToFloat(uf_remappedPS[3].w)) + intBitsToFloat(R127i.z)));
PV0i.z = R123i.z;
R123i.w = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(R126i.w)),intBitsToFloat(uf_remappedPS[3].z)) + intBitsToFloat(PV1i.w)));
PV0i.w = R123i.w;
// 5
backupReg0i = R127i.y;
backupReg0i = R127i.y;
backupReg0i = R127i.y;
R127i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R127i.y),intBitsToFloat(uf_remappedPS[4].x)) + intBitsToFloat(PV0i.x)));
R127i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(backupReg0i),intBitsToFloat(uf_remappedPS[4].y)) + intBitsToFloat(PV0i.y)));
R123i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(backupReg0i),intBitsToFloat(uf_remappedPS[4].w)) + intBitsToFloat(PV0i.z)));
PV1i.z = R123i.z;
R126i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(backupReg0i),intBitsToFloat(uf_remappedPS[4].z)) + intBitsToFloat(PV0i.w)));
// 6
PS0i = floatBitsToInt(1.0 / intBitsToFloat(PV1i.z));
// 7
backupReg0i = R127i.x;
backupReg1i = R127i.y;
R127i.x = floatBitsToInt(intBitsToFloat(backupReg0i) * intBitsToFloat(PS0i));
PV1i.x = R127i.x;
R127i.y = floatBitsToInt(intBitsToFloat(backupReg1i) * intBitsToFloat(PS0i));
PV1i.y = R127i.y;
R127i.z = floatBitsToInt(intBitsToFloat(R126i.w) * intBitsToFloat(PS0i));
PV1i.z = R127i.z;
// 8
R3i.x = floatBitsToInt(-(intBitsToFloat(PV1i.x)) + intBitsToFloat(uf_remappedPS[5].x));
PV0i.x = R3i.x;
R4i.y = floatBitsToInt(-(intBitsToFloat(PV1i.y)) + intBitsToFloat(uf_remappedPS[5].y));
PV0i.y = R4i.y;
R6i.z = floatBitsToInt(-(intBitsToFloat(PV1i.z)) + intBitsToFloat(uf_remappedPS[5].z));
PV0i.z = R6i.z;
PS0i = floatBitsToInt(intBitsToFloat(PV1i.z) * intBitsToFloat(PV1i.z));
// 9
tempi.x = floatBitsToInt(dot(vec4(-(intBitsToFloat(PV0i.x)),-(intBitsToFloat(PV0i.y)),-(intBitsToFloat(PV0i.z)),-0.0),vec4(-(intBitsToFloat(PV0i.x)),-(intBitsToFloat(PV0i.y)),-(intBitsToFloat(PV0i.z)),0.0)));
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
R122i.x = floatBitsToInt((intBitsToFloat(R127i.y) * intBitsToFloat(R127i.y) + intBitsToFloat(PS0i)));
PS1i = R122i.x;
// 10
R123i.w = floatBitsToInt((intBitsToFloat(R127i.x) * intBitsToFloat(R127i.x) + intBitsToFloat(PS1i)));
PV0i.w = R123i.w;
tempResultf = 1.0 / sqrt(intBitsToFloat(PV1i.x));
PS0i = floatBitsToInt(tempResultf);
// 11
PV1i.x = floatBitsToInt(mul_nonIEEE(-(intBitsToFloat(R3i.x)), intBitsToFloat(PS0i)));
PV1i.y = floatBitsToInt(mul_nonIEEE(-(intBitsToFloat(R4i.y)), intBitsToFloat(PS0i)));
PV1i.z = floatBitsToInt(mul_nonIEEE(-(intBitsToFloat(R6i.z)), intBitsToFloat(PS0i)));
tempResultf = 1.0 / sqrt(intBitsToFloat(PV0i.w));
R126i.y = floatBitsToInt(tempResultf);
PS1i = R126i.y;
// 12
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(PV1i.x),intBitsToFloat(PV1i.y),intBitsToFloat(PV1i.z),-0.0),vec4(intBitsToFloat(uf_remappedPS[6].x),intBitsToFloat(uf_remappedPS[6].y),intBitsToFloat(uf_remappedPS[6].z),0.0)));
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
R0i.w = tempi.x;
R4i.x = floatBitsToInt(mul_nonIEEE(-(intBitsToFloat(R127i.x)), intBitsToFloat(PS1i)));
PS0i = R4i.x;
// 13
if(  (intBitsToFloat(uf_remappedPS[7].y) >= intBitsToFloat(PV0i.x))) discard;
R3i.y = floatBitsToInt(mul_nonIEEE(-(intBitsToFloat(R127i.y)), intBitsToFloat(R126i.y)));
R4i.z = floatBitsToInt(mul_nonIEEE(-(intBitsToFloat(R127i.z)), intBitsToFloat(R126i.y)));
}
if( activeMaskStackC[1] == true ) {
R1i.xy = floatBitsToInt(texelFetch(textureUnitPS3, ivec2(intBitsToFloat(R0i.x), intBitsToFloat(R0i.y)), 0).xy);
R2i.xyz = floatBitsToInt(texelFetch(textureUnitPS4, ivec2(intBitsToFloat(R0i.x), intBitsToFloat(R0i.y)), 0).xyz);
R5i.xyzw = floatBitsToInt(texelFetch(textureUnitPS2, ivec2(intBitsToFloat(R0i.x), intBitsToFloat(R0i.y)), 0).xyzw);
}
if( activeMaskStackC[1] == true ) {
activeMaskStack[1] = activeMaskStack[0];
activeMaskStackC[2] = activeMaskStackC[1];
// 0
PV0i.z = floatBitsToInt(intBitsToFloat(R5i.w) * intBitsToFloat(0x437f0000));
R123i.w = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(R1i.x)),intBitsToFloat(R1i.x)) + intBitsToFloat(0x3f800347)));
PV0i.w = R123i.w;
PS0i = floatBitsToInt(sqrt(intBitsToFloat(R2i.y)));
// 1
R123i.y = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(R1i.y)),intBitsToFloat(R1i.y)) + intBitsToFloat(PV0i.w)));
PV1i.y = R123i.y;
R123i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PS0i),intBitsToFloat(uf_remappedPS[8].z)) + intBitsToFloat(R2i.y)));
PV1i.z = R123i.z;
PS1i = int(intBitsToFloat(PV0i.z));
// 2
R127i.x = PS1i & 0x00000004;
PV0i.x = R127i.x;
R127i.y = PS1i & 0x00000002;
R0i.z = floatBitsToInt(min(intBitsToFloat(PV1i.z), 1.0));
PV0i.z = R0i.z;
R127i.z = floatBitsToInt(sqrt(intBitsToFloat(PV1i.y)));
PS0i = R127i.z;
// 3
R126i.x = floatBitsToInt(intBitsToFloat(PV0i.z) * intBitsToFloat(0x41300000));
R0i.y = ((PV0i.x == 0)?(R1i.y):(R1i.y));
PV1i.w = floatBitsToInt(-(intBitsToFloat(PS0i)));
R0i.x = ((PV0i.x == 0)?(R1i.x):(R1i.x));
PS1i = R0i.x;
// 4
R1i.z = ((R127i.x == 0)?(R127i.z):(PV1i.w));
R2i.w = floatBitsToInt(float(R127i.y));
R2i.w = clampFI32(R2i.w);
PS0i = R2i.w;
// 5
R1i.x = floatBitsToInt(exp2(intBitsToFloat(R126i.x)));
PS1i = R1i.x;
// 6
predResult = (intBitsToFloat(uf_remappedPS[7].y) != intBitsToFloat(uf_remappedPS[7].z));
activeMaskStack[1] = predResult;
activeMaskStackC[2] = predResult == true && activeMaskStackC[1] == true;
}
else {
activeMaskStack[1] = false;
activeMaskStackC[2] = false;
}
if( activeMaskStackC[2] == true ) {
// 0
PV0i.x = floatBitsToInt(-(intBitsToFloat(uf_remappedPS[7].y)) + intBitsToFloat(uf_remappedPS[7].z));
// 1
PV1i.y = floatBitsToInt(intBitsToFloat(R0i.w) + -(intBitsToFloat(uf_remappedPS[7].y)));
PS1i = floatBitsToInt(1.0 / intBitsToFloat(PV0i.x));
// 2
PV0i.w = floatBitsToInt(intBitsToFloat(PV1i.y) * intBitsToFloat(PS1i));
// 3
tempResultf = log2(intBitsToFloat(PV0i.w));
if( isinf(tempResultf) == true ) tempResultf = -3.40282347E+38F;
PS1i = floatBitsToInt(tempResultf);
// 4
PV0i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(uf_remappedPS[7].w), intBitsToFloat(PS1i)));
// 5
R3i.z = floatBitsToInt(exp2(intBitsToFloat(PV0i.x)));
PS1i = R3i.z;
}
activeMaskStack[1] = activeMaskStack[1] == false;
activeMaskStackC[2] = activeMaskStack[1] == true && activeMaskStackC[1] == true;
if( activeMaskStackC[2] == true ) {
// 0
R3i.z = floatBitsToInt(1.0);
}
activeMaskStackC[1] = activeMaskStack[0] == true && activeMaskStackC[0] == true;
if( activeMaskStackC[1] == true ) {
activeMaskStack[1] = activeMaskStack[0];
activeMaskStackC[2] = activeMaskStackC[1];
// 0
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R3i.x),intBitsToFloat(R4i.y),intBitsToFloat(R6i.z),-0.0),vec4(intBitsToFloat(R3i.x),intBitsToFloat(R4i.y),intBitsToFloat(R6i.z),0.0)));
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
R127i.x = floatBitsToInt(1.0 / intBitsToFloat(uf_remappedPS[5].w));
PS0i = R127i.x;
// 1
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R3i.x),intBitsToFloat(R4i.y),intBitsToFloat(R6i.z),-0.0),vec4(intBitsToFloat(R3i.x),intBitsToFloat(R4i.y),intBitsToFloat(R6i.z),0.0)));
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
tempResultf = 1.0 / sqrt(intBitsToFloat(PV0i.x));
PS1i = floatBitsToInt(tempResultf);
// 2
R126i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R3i.x), intBitsToFloat(PS1i)));
PV0i.x = R126i.x;
R125i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R4i.y), intBitsToFloat(PS1i)));
PV0i.y = R125i.y;
R125i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R6i.z), intBitsToFloat(PS1i)));
PV0i.z = R125i.z;
R126i.w = floatBitsToInt(intBitsToFloat(R1i.x) + intBitsToFloat(0x41000000));
PS0i = floatBitsToInt(sqrt(intBitsToFloat(PV1i.x)));
// 3
backupReg0i = R127i.x;
R127i.xyz = floatBitsToInt(vec3(intBitsToFloat(R4i.x),intBitsToFloat(R3i.y),intBitsToFloat(R4i.z)) + vec3(intBitsToFloat(PV0i.x),intBitsToFloat(PV0i.y),intBitsToFloat(PV0i.z)));
PV1i.x = R127i.x;
PV1i.y = R127i.y;
PV1i.z = R127i.z;
PV1i.w = floatBitsToInt(intBitsToFloat(PS0i) * intBitsToFloat(backupReg0i));
R126i.y = floatBitsToInt(-(intBitsToFloat(R2i.x)) + 1.0);
PS1i = R126i.y;
// 4
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(PV1i.x),intBitsToFloat(PV1i.y),intBitsToFloat(PV1i.z),-0.0),vec4(intBitsToFloat(PV1i.x),intBitsToFloat(PV1i.y),intBitsToFloat(PV1i.z),0.0)));
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
R126i.z = floatBitsToInt(-(intBitsToFloat(PV1i.w)) + 1.0);
R126i.z = clampFI32(R126i.z);
PS0i = R126i.z;
// 5
backupReg0i = R0i.x;
backupReg1i = R0i.y;
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(backupReg0i),intBitsToFloat(backupReg1i),intBitsToFloat(R1i.z),-0.0),vec4(intBitsToFloat(R4i.x),intBitsToFloat(R3i.y),intBitsToFloat(R4i.z),0.0)));
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
R6i.z = tempi.x;
tempResultf = 1.0 / sqrt(intBitsToFloat(PV0i.x));
PS1i = floatBitsToInt(tempResultf);
// 6
PV0i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R127i.x), intBitsToFloat(PS1i)));
PV0i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R127i.y), intBitsToFloat(PS1i)));
PV0i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R127i.z), intBitsToFloat(PS1i)));
PV0i.w = floatBitsToInt(-(intBitsToFloat(PV1i.x)) + 1.0);
tempResultf = log2(intBitsToFloat(R126i.z));
if( isinf(tempResultf) == true ) tempResultf = -3.40282347E+38F;
R127i.y = floatBitsToInt(tempResultf);
PS0i = R127i.y;
// 7
backupReg0i = R0i.x;
backupReg1i = R0i.y;
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(backupReg0i),intBitsToFloat(backupReg1i),intBitsToFloat(R1i.z),-0.0),vec4(intBitsToFloat(PV0i.x),intBitsToFloat(PV0i.y),intBitsToFloat(PV0i.z),0.0)));
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
PS1i = floatBitsToInt(max(intBitsToFloat(PV0i.w), 0.0));
// 8
R125i.x = floatBitsToInt(min(intBitsToFloat(R0i.z), intBitsToFloat(R126i.y)));
PV0i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R1i.z), intBitsToFloat(R125i.z)));
PV0i.z = floatBitsToInt(max(intBitsToFloat(PV1i.x), 0.0));
R127i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(uf_remappedPS[7].x), intBitsToFloat(R127i.y)));
tempResultf = log2(intBitsToFloat(PS1i));
if( isinf(tempResultf) == true ) tempResultf = -3.40282347E+38F;
R127i.x = floatBitsToInt(tempResultf);
PS0i = R127i.x;
// 9
backupReg0i = R0i.x;
backupReg1i = R0i.y;
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(backupReg0i),intBitsToFloat(backupReg1i),intBitsToFloat(PV0i.y),-0.0),vec4(intBitsToFloat(R126i.x),intBitsToFloat(R125i.y),1.0,0.0)));
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
R3i.w = tempi.x;
tempResultf = log2(intBitsToFloat(PV0i.z));
if( isinf(tempResultf) == true ) tempResultf = -3.40282347E+38F;
PS1i = floatBitsToInt(tempResultf);
// 10
PV0i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R1i.x), intBitsToFloat(PS1i)));
R2i.y = PV1i.x;
R2i.y = clampFI32(R2i.y);
R125i.z = floatBitsToInt(intBitsToFloat(R127i.x) * intBitsToFloat(0x40a00000));
PV0i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R1i.z), intBitsToFloat(R4i.z)));
R3i.x = floatBitsToInt(exp2(intBitsToFloat(R127i.w)));
PS0i = R3i.x;
// 11
backupReg0i = R0i.x;
backupReg1i = R0i.y;
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(backupReg0i),intBitsToFloat(backupReg1i),intBitsToFloat(PV0i.w),-0.0),vec4(intBitsToFloat(R4i.x),intBitsToFloat(R3i.y),1.0,0.0)));
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
PS1i = floatBitsToInt(exp2(intBitsToFloat(PV0i.x)));
// 12
PV0i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PS1i), intBitsToFloat(R126i.w)));
PV0i.w = floatBitsToInt(intBitsToFloat(PV1i.x) + intBitsToFloat(PV1i.x));
R126i.w = floatBitsToInt(exp2(intBitsToFloat(R125i.z)));
PS0i = R126i.w;
// 13
backupReg0i = R0i.x;
PV1i.x = floatBitsToInt(intBitsToFloat(PV0i.y) * intBitsToFloat(0x3d22f983));
R125i.y = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(PV0i.w)),intBitsToFloat(backupReg0i)) + intBitsToFloat(R4i.x)));
R125i.z = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(PV0i.w)),intBitsToFloat(R0i.y)) + intBitsToFloat(R3i.y)));
R127i.w = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(PV0i.w)),intBitsToFloat(R1i.z)) + intBitsToFloat(R4i.z)));
PV1i.w = R127i.w;
// 14
R6i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R126i.w),intBitsToFloat(R125i.x)) + intBitsToFloat(R2i.x)));
R126i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV1i.x), intBitsToFloat(R2i.y)));
PV0i.w = R126i.w;
PS0i = floatBitsToInt(mul_nonIEEE(-(intBitsToFloat(PV1i.w)), intBitsToFloat(uf_remappedPS[9].z)));
// 15
R1i.x = floatBitsToInt(dot(vec4(-(intBitsToFloat(R125i.y)),-(intBitsToFloat(R125i.z)),intBitsToFloat(PS0i),-0.0),vec4(intBitsToFloat(uf_remappedPS[9].x),intBitsToFloat(uf_remappedPS[9].y),1.0,0.0)));
PV1i.x = R1i.x;
PV1i.y = R1i.x;
PV1i.z = R1i.x;
PV1i.w = R1i.x;
R4i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.w), intBitsToFloat(uf_remappedPS[10].x)));
PS1i = R4i.x;
// 16
tempi.x = floatBitsToInt(dot(vec4(-(intBitsToFloat(R125i.y)),-(intBitsToFloat(R125i.z)),-(intBitsToFloat(R127i.w)),-0.0),vec4(intBitsToFloat(uf_remappedPS[11].x),intBitsToFloat(uf_remappedPS[11].y),intBitsToFloat(uf_remappedPS[11].z),0.0)));
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
R1i.y = tempi.x;
// 17
tempi.x = floatBitsToInt(dot(vec4(-(intBitsToFloat(R125i.y)),-(intBitsToFloat(R125i.z)),-(intBitsToFloat(R127i.w)),-0.0),vec4(intBitsToFloat(uf_remappedPS[12].x),intBitsToFloat(uf_remappedPS[12].y),intBitsToFloat(uf_remappedPS[12].z),0.0)));
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
R7i.z = tempi.x;
// 18
R4i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R126i.w), intBitsToFloat(uf_remappedPS[10].y)));
R4i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R126i.w), intBitsToFloat(uf_remappedPS[10].z)));
// 19
predResult = (uf_remappedPS[8].w != 0);
activeMaskStack[1] = predResult;
activeMaskStackC[2] = predResult == true && activeMaskStackC[1] == true;
}
else {
activeMaskStack[1] = false;
activeMaskStackC[2] = false;
}
if( activeMaskStackC[2] == true ) {
// 0
backupReg0i = R0i.y;
backupReg1i = R0i.z;
R126i.x = floatBitsToInt(dot(vec4(intBitsToFloat(R0i.x),intBitsToFloat(backupReg0i),intBitsToFloat(R1i.z),-0.0),vec4(intBitsToFloat(uf_remappedPS[13].x),intBitsToFloat(uf_remappedPS[13].y),intBitsToFloat(uf_remappedPS[13].z),0.0)));
PV0i.x = R126i.x;
PV0i.y = R126i.x;
PV0i.z = R126i.x;
PV0i.w = R126i.x;
R127i.y = floatBitsToInt(-(intBitsToFloat(backupReg1i)) + 1.0);
PS0i = R127i.y;
// 1
backupReg0i = R0i.x;
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(backupReg0i),intBitsToFloat(R0i.y),intBitsToFloat(R1i.z),-0.0),vec4(intBitsToFloat(uf_remappedPS[14].x),intBitsToFloat(uf_remappedPS[14].y),intBitsToFloat(uf_remappedPS[14].z),0.0)));
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
R126i.y = tempi.x;
// 2
backupReg0i = R0i.x;
backupReg1i = R0i.y;
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(backupReg0i),intBitsToFloat(backupReg1i),intBitsToFloat(R1i.z),-0.0),vec4(intBitsToFloat(uf_remappedPS[15].x),intBitsToFloat(uf_remappedPS[15].y),intBitsToFloat(uf_remappedPS[15].z),0.0)));
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
R126i.z = tempi.x;
// 3
backupReg0i = R127i.y;
redcCUBE(vec4(intBitsToFloat(R7i.z),intBitsToFloat(R7i.z),intBitsToFloat(R1i.x),intBitsToFloat(R1i.y)),vec4(intBitsToFloat(R1i.y),intBitsToFloat(R1i.x),intBitsToFloat(R7i.z),intBitsToFloat(R7i.z)),cubeMapSTM,cubeMapFaceId);
R127i.x = floatBitsToInt(cubeMapSTM.x);
R127i.y = floatBitsToInt(cubeMapSTM.y);
R127i.z = floatBitsToInt(cubeMapSTM.z);
R127i.w = cubeMapFaceId;
PV1i.x = R127i.x;
PV1i.y = R127i.y;
PV1i.z = R127i.z;
PV1i.w = R127i.w;
R0i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(backupReg0i), intBitsToFloat(uf_remappedPS[16].y)));
PS1i = R0i.w;
// 4
backupReg0i = R126i.x;
backupReg0i = R126i.x;
backupReg1i = R126i.z;
backupReg2i = R126i.y;
backupReg1i = R126i.z;
redcCUBE(vec4(intBitsToFloat(R126i.z),intBitsToFloat(R126i.z),intBitsToFloat(backupReg0i),intBitsToFloat(backupReg2i)),vec4(intBitsToFloat(R126i.y),intBitsToFloat(backupReg0i),intBitsToFloat(backupReg1i),intBitsToFloat(backupReg1i)),cubeMapSTM,cubeMapFaceId);
R126i.x = floatBitsToInt(cubeMapSTM.x);
R126i.y = floatBitsToInt(cubeMapSTM.y);
R126i.z = floatBitsToInt(cubeMapSTM.z);
R126i.w = cubeMapFaceId;
PV0i.x = R126i.x;
PV0i.y = R126i.y;
PV0i.z = R126i.z;
PV0i.w = R126i.w;
R0i.z = PV1i.w;
PS0i = R0i.z;
// 5
R2i.x = floatBitsToInt((0.0 * intBitsToFloat(uf_remappedPS[8].x) + 1.0));
R1i.z = PV0i.w;
R1i.w = uf_remappedPS[16].x;
PS1i = floatBitsToInt(1.0 / abs(intBitsToFloat(R127i.z)));
// 6
R123i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R127i.y),intBitsToFloat(PS1i)) + 1.5));
PV0i.z = R123i.z;
R123i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R127i.x),intBitsToFloat(PS1i)) + 1.5));
PV0i.w = R123i.w;
PS0i = floatBitsToInt(1.0 / abs(intBitsToFloat(R126i.z)));
// 7
R123i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R126i.y),intBitsToFloat(PS0i)) + 1.5));
PV1i.x = R123i.x;
R0i.y = PV0i.w;
R123i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R126i.x),intBitsToFloat(PS0i)) + 1.5));
PV1i.w = R123i.w;
R0i.x = PV0i.z;
PS1i = R0i.x;
// 8
R1i.x = PV1i.x;
R1i.y = PV1i.w;
}
if( activeMaskStackC[2] == true ) {
R0i.xyz = floatBitsToInt(textureLod(textureUnitPS1, vec4(redcCUBEReverse(intBitsToFloat(R0i.xy),R0i.z),cubeMapArrayIndex1),intBitsToFloat(R0i.w)).xyz);
R1i.xyz = floatBitsToInt(textureLod(textureUnitPS0, vec4(redcCUBEReverse(intBitsToFloat(R1i.xy),R1i.z),cubeMapArrayIndex0),intBitsToFloat(R1i.w)).xyz);
}
if( activeMaskStackC[2] == true ) {
// 0
backupReg0i = R0i.x;
PV0i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(uf_remappedPS[16].w), intBitsToFloat(R0i.y)));
PV0i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(uf_remappedPS[16].w), intBitsToFloat(backupReg0i)));
PV0i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(uf_remappedPS[16].w), intBitsToFloat(R0i.z)));
R0i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R1i.x), intBitsToFloat(uf_remappedPS[17].x)));
PS0i = R0i.x;
// 1
backupReg0i = R4i.x;
backupReg1i = R4i.y;
backupReg2i = R4i.z;
R4i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R2i.x),intBitsToFloat(PV0i.y)) + intBitsToFloat(backupReg0i)));
R4i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R2i.x),intBitsToFloat(PV0i.x)) + intBitsToFloat(backupReg1i)));
R4i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R2i.x),intBitsToFloat(PV0i.w)) + intBitsToFloat(backupReg2i)));
R0i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R1i.y), intBitsToFloat(uf_remappedPS[17].y)));
PS1i = R0i.y;
// 2
R0i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R1i.z), intBitsToFloat(uf_remappedPS[17].z)));
}
activeMaskStack[1] = activeMaskStack[1] == false;
activeMaskStackC[2] = activeMaskStack[1] == true && activeMaskStackC[1] == true;
if( activeMaskStackC[2] == true ) {
// 0
R127i.x = floatBitsToInt(-(intBitsToFloat(uf_remappedPS[6].y)));
R127i.y = floatBitsToInt(-(intBitsToFloat(uf_remappedPS[6].z)) * intBitsToFloat(0x3dcccccd));
// 1
R127i.z = floatBitsToInt(-(intBitsToFloat(uf_remappedPS[6].x)));
PV1i.z = R127i.z;
// 2
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R127i.x),intBitsToFloat(R127i.y),intBitsToFloat(PV1i.z),-0.0),vec4(intBitsToFloat(R127i.x),intBitsToFloat(R127i.y),intBitsToFloat(PV1i.z),0.0)));
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
// 3
tempResultf = 1.0 / sqrt(intBitsToFloat(PV0i.x));
PS1i = floatBitsToInt(tempResultf);
// 4
PV0i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R127i.x), intBitsToFloat(PS1i)));
PV0i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R127i.y), intBitsToFloat(PS1i)));
PV0i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R127i.z), intBitsToFloat(PS1i)));
// 5
backupReg0i = R0i.x;
backupReg1i = R0i.y;
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(backupReg0i),intBitsToFloat(backupReg1i),intBitsToFloat(R1i.z),-0.0),vec4(intBitsToFloat(PV0i.x),intBitsToFloat(PV0i.y),intBitsToFloat(PV0i.z),0.0)));
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
// 6
PV0i.w = floatBitsToInt(max(intBitsToFloat(PV1i.x), intBitsToFloat(0x3ecccccd)));
// 7
R0i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.w), intBitsToFloat(uf_remappedPS[18].x)));
R0i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.w), intBitsToFloat(uf_remappedPS[18].y)));
R0i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.w), intBitsToFloat(uf_remappedPS[18].z)));
}
activeMaskStackC[1] = activeMaskStack[0] == true && activeMaskStackC[0] == true;
if( activeMaskStackC[1] == true ) {
// 0
PV0i.x = floatBitsToInt(max(intBitsToFloat(R6i.z), 0.0));
R126i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R6i.x), intBitsToFloat(R4i.x)));
PV0i.z = R3i.w;
PV0i.z = floatBitsToInt(intBitsToFloat(PV0i.z) / 2.0);
R127i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R6i.x), intBitsToFloat(R4i.y)));
R126i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R6i.x), intBitsToFloat(R4i.z)));
PS0i = R126i.w;
// 1
R127i.y = floatBitsToInt(min(intBitsToFloat(PV0i.z), 0.0));
PV1i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.x), intBitsToFloat(PV0i.x)));
R0i.w = floatBitsToInt(1.0);
PS1i = R0i.w;
// 2
R123i.z = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(PV1i.w)),intBitsToFloat(PV1i.w)) + 1.0));
PV0i.z = R123i.z;
// 3
R123i.y = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(R127i.y)),intBitsToFloat(PV0i.z)) + 1.0));
PV1i.y = R123i.y;
// 4
R123i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV1i.y),intBitsToFloat(uf_remappedPS[18].x)) + -(intBitsToFloat(R0i.x))));
PV0i.x = R123i.x;
R123i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV1i.y),intBitsToFloat(uf_remappedPS[18].z)) + -(intBitsToFloat(R0i.z))));
PV0i.z = R123i.z;
R123i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV1i.y),intBitsToFloat(uf_remappedPS[18].y)) + -(intBitsToFloat(R0i.y))));
PV0i.w = R123i.w;
// 5
R123i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.w),intBitsToFloat(R2i.w)) + intBitsToFloat(R0i.y)));
PV1i.x = R123i.x;
R123i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.x),intBitsToFloat(R2i.w)) + intBitsToFloat(R0i.x)));
PV1i.y = R123i.y;
R123i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.z),intBitsToFloat(R2i.w)) + intBitsToFloat(R0i.z)));
PV1i.w = R123i.w;
// 6
R123i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R2i.y),intBitsToFloat(uf_remappedPS[19].z)) + intBitsToFloat(PV1i.w)));
PV0i.x = R123i.x;
R123i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R2i.y),intBitsToFloat(uf_remappedPS[19].y)) + intBitsToFloat(PV1i.x)));
PV0i.y = R123i.y;
R123i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R2i.y),intBitsToFloat(uf_remappedPS[19].x)) + intBitsToFloat(PV1i.y)));
PV0i.z = R123i.z;
// 7
PV1i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R2i.z), intBitsToFloat(PV0i.x)));
PV1i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R2i.z), intBitsToFloat(PV0i.y)));
PV1i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R2i.z), intBitsToFloat(PV0i.z)));
// 8
PV0i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R5i.x), intBitsToFloat(PV1i.w)));
PV0i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R5i.z), intBitsToFloat(PV1i.y)));
PV0i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R5i.y), intBitsToFloat(PV1i.z)));
// 9
R123i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R2i.z),intBitsToFloat(R127i.w)) + intBitsToFloat(PV0i.w)));
PV1i.x = R123i.x;
R123i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R2i.z),intBitsToFloat(R126i.y)) + intBitsToFloat(PV0i.x)));
PV1i.y = R123i.y;
R123i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R2i.z),intBitsToFloat(R126i.w)) + intBitsToFloat(PV0i.z)));
PV1i.w = R123i.w;
// 10
PV0i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R3i.z), intBitsToFloat(PV1i.w)));
PV0i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R3i.z), intBitsToFloat(PV1i.x)));
PV0i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R3i.z), intBitsToFloat(PV1i.y)));
// 11
R0i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R3i.x), intBitsToFloat(PV0i.z)));
R0i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R3i.x), intBitsToFloat(PV0i.y)));
R0i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R3i.x), intBitsToFloat(PV0i.x)));
}
// export
passPixelColor0 = vec4(intBitsToFloat(R0i.x), intBitsToFloat(R0i.y), intBitsToFloat(R0i.z), intBitsToFloat(R0i.w));
}
